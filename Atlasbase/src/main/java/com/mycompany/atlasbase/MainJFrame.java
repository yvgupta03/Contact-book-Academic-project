/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.atlasbase;

//import static com.mycompany.atlasbase.abc.conn;
import java.awt.Color;
import java.awt.Label;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author gupta
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    
    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modifyDeleteFrame = new javax.swing.JFrame();
        addressLabel = new java.awt.Label();
        nameLabel = new java.awt.Label();
        phoneLabel = new java.awt.Label();
        dateLabel = new java.awt.Label();
        nameScrollPane = new javax.swing.JScrollPane();
        nameTable = new javax.swing.JTable();
        nameLabel2 = new java.awt.Label();
        nameLabel3 = new java.awt.Label();
        addressScrollPane = new javax.swing.JScrollPane();
        addressTable = new javax.swing.JTable();
        phoneScrollPane = new javax.swing.JScrollPane();
        phoneTable = new javax.swing.JTable();
        datesScrollPane = new javax.swing.JScrollPane();
        datesTable = new javax.swing.JTable();
        phoneLabel2 = new java.awt.Label();
        dateLabel2 = new java.awt.Label();
        addressLabel2 = new java.awt.Label();
        addressLabel3 = new java.awt.Label();
        dateLabel3 = new java.awt.Label();
        phoneLabel3 = new java.awt.Label();
        startModifyButton = new javax.swing.JButton();
        endModifyButton = new javax.swing.JButton();
        deleteContactButton = new javax.swing.JButton();
        deleteAddressButton = new javax.swing.JButton();
        deletePhoneButton = new javax.swing.JButton();
        deleteDateButton = new javax.swing.JButton();
        stopModifyButton = new javax.swing.JButton();
        insertFrame = new javax.swing.JFrame();
        insertFname = new java.awt.TextField();
        labelFname = new java.awt.Label();
        labelFname1 = new java.awt.Label();
        insertMname = new java.awt.TextField();
        labelFname2 = new java.awt.Label();
        insertLname = new java.awt.TextField();
        labelFname3 = new java.awt.Label();
        insertAddressType = new java.awt.TextField();
        labelFname4 = new java.awt.Label();
        insertAddress = new java.awt.TextField();
        labelFname5 = new java.awt.Label();
        insertCity = new java.awt.TextField();
        insertState = new java.awt.TextField();
        labelFname6 = new java.awt.Label();
        insertZip = new java.awt.TextField();
        labelFname7 = new java.awt.Label();
        insertPhoneType = new java.awt.TextField();
        labelFname8 = new java.awt.Label();
        labelFname9 = new java.awt.Label();
        insertPhoneNumber = new java.awt.TextField();
        labelFname10 = new java.awt.Label();
        insertAreaCode = new java.awt.TextField();
        insertDateType = new java.awt.TextField();
        labelFname11 = new java.awt.Label();
        labelFname12 = new java.awt.Label();
        insertYear = new java.awt.TextField();
        insertMonth = new java.awt.TextField();
        insertDay = new java.awt.TextField();
        submitInsertButton = new java.awt.Button();
        dialogFrame = new javax.swing.JFrame();
        dialogMsgLabel = new java.awt.Label();
        dialogClose = new javax.swing.JButton();
        searchField = new java.awt.TextField();
        searchCountLabel = new java.awt.Label();
        searchList = new java.awt.List();
        insertionButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();

        modifyDeleteFrame.setTitle("ATLASBASE - Contact Modifier");
        modifyDeleteFrame.setBounds(new java.awt.Rectangle(480, 233, 840, 600));
        modifyDeleteFrame.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                modifyDeleteFrameComponentHidden(evt);
            }
        });

        addressLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addressLabel.setText("Address Components:");

        nameLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        nameLabel.setText("Name Components:");

        phoneLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        phoneLabel.setText("Phone Components:");

        dateLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        dateLabel.setText("Date Components:");

        nameScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nameScrollPaneMouseClicked(evt);
            }
        });

        nameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "First Name", "Middle Name", "Last Name"
            }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return toggleCell;
            }
        });
        nameTable.setRowHeight(18);
        nameScrollPane.setViewportView(nameTable);
        nameTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        nameLabel2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        nameLabel2.setForeground(new java.awt.Color(153, 0, 0));
        nameLabel2.setText("Records Found: 0");

        nameLabel3.setAlignment(java.awt.Label.RIGHT);
        nameLabel3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        nameLabel3.setForeground(new java.awt.Color(0, 153, 0));

        addressTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Address Type", "Address", "City", "State", "Zip Code"
            }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return toggleCell;
            }
        });
        addressTable.setRowHeight(18);
        addressTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addressTableMouseClicked(evt);
            }
        });
        addressScrollPane.setViewportView(addressTable);
        addressTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (addressTable.getColumnModel().getColumnCount() > 0) {
            addressTable.getColumnModel().getColumn(3).setMinWidth(100);
            addressTable.getColumnModel().getColumn(3).setPreferredWidth(100);
            addressTable.getColumnModel().getColumn(3).setMaxWidth(100);
            addressTable.getColumnModel().getColumn(4).setMinWidth(60);
            addressTable.getColumnModel().getColumn(4).setPreferredWidth(60);
            addressTable.getColumnModel().getColumn(4).setMaxWidth(60);
        }

        phoneTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Phone Number Type", "Area Code", "Phone Number"
            }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return toggleCell;
            }
        });
        phoneTable.setRowHeight(18);
        phoneTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                phoneTableFocusLost(evt);
            }
        });
        phoneTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                phoneTableMouseClicked(evt);
            }
        });
        phoneScrollPane.setViewportView(phoneTable);
        phoneTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        datesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Date Type", "Date Year (yyyy)", "Date Month (mm)", "Date Day (dd)"
            }
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return toggleCell;
            }
        });
        datesTable.setRowHeight(18);
        datesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                datesTableMouseClicked(evt);
            }
        });
        datesScrollPane.setViewportView(datesTable);
        datesTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        phoneLabel2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        phoneLabel2.setForeground(new java.awt.Color(153, 0, 0));
        phoneLabel2.setText("Records Found: 0");

        dateLabel2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        dateLabel2.setForeground(new java.awt.Color(153, 0, 0));
        dateLabel2.setText("Records Found: 0");

        addressLabel2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addressLabel2.setForeground(new java.awt.Color(153, 0, 0));
        addressLabel2.setText("Records Found: 0");

        addressLabel3.setAlignment(java.awt.Label.RIGHT);
        addressLabel3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addressLabel3.setForeground(new java.awt.Color(0, 153, 0));

        dateLabel3.setAlignment(java.awt.Label.RIGHT);
        dateLabel3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        dateLabel3.setForeground(new java.awt.Color(0, 153, 0));

        phoneLabel3.setAlignment(java.awt.Label.RIGHT);
        phoneLabel3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        phoneLabel3.setForeground(new java.awt.Color(0, 153, 0));

        startModifyButton.setText("Modify Contact Record");
        startModifyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startModifyButtonMouseClicked(evt);
            }
        });

        endModifyButton.setText("Finish Editing Record");
        endModifyButton.setEnabled(false);
        endModifyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                endModifyButtonMouseClicked(evt);
            }
        });

        deleteContactButton.setText("Delete Contact Record");
        deleteContactButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteContactButtonMouseClicked(evt);
            }
        });

        deleteAddressButton.setText("Delete Selected Address");
        deleteAddressButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteAddressButtonMouseClicked(evt);
            }
        });

        deletePhoneButton.setText("Delete Selected Phone");
        deletePhoneButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deletePhoneButtonMouseClicked(evt);
            }
        });

        deleteDateButton.setText("Delete Selected Date");
        deleteDateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteDateButtonMouseClicked(evt);
            }
        });

        stopModifyButton.setText("Stop Modifying Contact Record");
        stopModifyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopModifyButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout modifyDeleteFrameLayout = new javax.swing.GroupLayout(modifyDeleteFrame.getContentPane());
        modifyDeleteFrame.getContentPane().setLayout(modifyDeleteFrameLayout);
        modifyDeleteFrameLayout.setHorizontalGroup(
            modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                        .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addressScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addressLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteAddressButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                        .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                                .addComponent(datesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deleteDateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                                .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nameScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                                        .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(phoneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(addressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                                                .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(addressLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(phoneLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                                                .addComponent(nameLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(nameLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteContactButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                                .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, modifyDeleteFrameLayout.createSequentialGroup()
                                        .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(37, 37, 37)
                                        .addComponent(dateLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(19, 19, 19)
                                        .addComponent(dateLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(phoneLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(phoneScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deletePhoneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(16, Short.MAX_VALUE))))
            .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(startModifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(endModifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(stopModifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        modifyDeleteFrameLayout.setVerticalGroup(
            modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(deleteContactButton)))
                .addGap(18, 18, 18)
                .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addressLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addressLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addressScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(deleteAddressButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(phoneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(phoneLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(phoneLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(phoneScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(deletePhoneButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(datesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(modifyDeleteFrameLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(deleteDateButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(modifyDeleteFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startModifyButton)
                    .addComponent(endModifyButton)
                    .addComponent(stopModifyButton))
                .addGap(27, 27, 27))
        );

        nameLabel3.getAccessibleContext().setAccessibleName("");

        insertFrame.setTitle("ATLASBASE - Contact Appender");
        insertFrame.setBounds(new java.awt.Rectangle(10, 150, 450, 680));
        insertFrame.setPreferredSize(new java.awt.Dimension(450, 680));

        labelFname.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelFname.setText("First Name :");

        labelFname1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelFname1.setText("Middle Name :");

        labelFname2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelFname2.setText("Last Name :");

        labelFname3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelFname3.setText("Address Type :");

        labelFname4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelFname4.setText("Address :");

        labelFname5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelFname5.setText("City :");

        labelFname6.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelFname6.setText("State :");

        labelFname7.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelFname7.setText("Zip Code :");

        labelFname8.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelFname8.setText("Phone Type :");

        labelFname9.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelFname9.setText("Phone Number :");

        labelFname10.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelFname10.setText("Area Code :");

        labelFname11.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelFname11.setText("Date Type :");

        labelFname12.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        labelFname12.setText("Date (yyyy-mm-dd) :");

        submitInsertButton.setLabel("Insert Record");
        submitInsertButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submitInsertButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout insertFrameLayout = new javax.swing.GroupLayout(insertFrame.getContentPane());
        insertFrame.getContentPane().setLayout(insertFrameLayout);
        insertFrameLayout.setHorizontalGroup(
            insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertFrameLayout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFname, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFname2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFname1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFname3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFname4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFname5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFname6, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFname7, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFname8, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFname9, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFname10, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelFname11, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(insertFrameLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(insertYear, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(insertMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(insertDay, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(insertAddressType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(insertAddress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(insertCity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(insertState, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(insertZip, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(insertPhoneType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(insertPhoneNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(insertAreaCode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(insertDateType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(insertLname, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(insertMname, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(insertFname, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
            .addGroup(insertFrameLayout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(submitInsertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        insertFrameLayout.setVerticalGroup(
            insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertFrameLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertMname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertAddressType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertPhoneType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertAreaCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertDateType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(insertFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelFname12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(submitInsertButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        dialogFrame.setTitle("ATLASBASE - Alert!!");
        dialogFrame.setBounds(new java.awt.Rectangle(450, 350, 435, 150));

        dialogMsgLabel.setAlignment(java.awt.Label.CENTER);
        dialogMsgLabel.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        dialogMsgLabel.setForeground(new java.awt.Color(204, 0, 0));

        dialogClose.setText("Close");
        dialogClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dialogCloseMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout dialogFrameLayout = new javax.swing.GroupLayout(dialogFrame.getContentPane());
        dialogFrame.getContentPane().setLayout(dialogFrameLayout);
        dialogFrameLayout.setHorizontalGroup(
            dialogFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dialogMsgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(dialogFrameLayout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(dialogClose, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(189, Short.MAX_VALUE))
        );
        dialogFrameLayout.setVerticalGroup(
            dialogFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogFrameLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(dialogMsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(dialogClose)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ATLASBASE - Contact Book");
        setBounds(new java.awt.Rectangle(460, 0, 300, 200));

        searchField.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        searchField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchFieldMouseClicked(evt);
            }
        });
        searchField.addTextListener(new java.awt.event.TextListener() {
            public void textValueChanged(java.awt.event.TextEvent evt) {
                searchFieldTextValueChanged(evt);
            }
        });

        searchCountLabel.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        searchCountLabel.setText("Search Result Choices: 0");

        searchList.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        searchList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchListMouseClicked(evt);
            }
        });
        searchList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchListKeyReleased(evt);
            }
        });

        insertionButton.setText("Insert New Record");
        insertionButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                insertionButtonMouseClicked(evt);
            }
        });

        viewButton.setText("View / More Actions >>");
        viewButton.setEnabled(false);
        viewButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(insertionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchCountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(searchCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(searchList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(insertionButton)
                    .addComponent(viewButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchFieldMouseClicked
        System.out.println("D");
        fetchRecords();
        
    }//GEN-LAST:event_searchFieldMouseClicked

    private void searchFieldTextValueChanged(java.awt.event.TextEvent evt) {//GEN-FIRST:event_searchFieldTextValueChanged
        System.out.println("C");
        fetchRecords();
        
    }//GEN-LAST:event_searchFieldTextValueChanged

    private void viewButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewButtonMouseClicked
        System.out.println("A");
        if(viewButton.isEnabled())
        {
            modifyDeleteFrame.setVisible(!modifyDeleteFrame.isVisible());
            //System.out.println("entered");
        }        
    }//GEN-LAST:event_viewButtonMouseClicked

    private void searchListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchListMouseClicked
        System.out.println("E");
        searchSelected = searchList.getSelectedItem();
        if(!(searchSelected == "") && !(searchSelected == null))
        {
            System.out.println(searchSelected);
            viewButton.setEnabled(true);
        }
        endModifyButton.setEnabled(false);
        startModifyButton.setEnabled(true);
        deleteContactButton.setEnabled(true);
        deleteAddressButton.setEnabled(true);
        deletePhoneButton.setEnabled(true);
        deleteDateButton.setEnabled(true);
        nameLabel3.setText("");
        addressLabel3.setText("");
        phoneLabel3.setText("");
        dateLabel3.setText("");
        
        nameTable.clearSelection();
        addressTable.clearSelection();
        phoneTable.clearSelection();;
        datesTable.clearSelection();
        toggleCell=false;
        setupTableData();
        
    }//GEN-LAST:event_searchListMouseClicked

    private void modifyDeleteFrameComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_modifyDeleteFrameComponentHidden
        System.out.println("H");
        if((searchList.getSelectedItem() == null) || (searchList.getSelectedItem() == ""))
        {
            viewButton.setEnabled(false);
        }
        baseStateModifyFrame();
    }//GEN-LAST:event_modifyDeleteFrameComponentHidden

    private void searchListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchListKeyReleased
        System.out.println("G");
        searchSelected = searchList.getSelectedItem();
        if(!(searchSelected == "") && !(searchSelected == null))
        {
            System.out.println(searchSelected);
            viewButton.setEnabled(true);
        }
        endModifyButton.setEnabled(false);
        startModifyButton.setEnabled(true);
        deleteContactButton.setEnabled(true);
        deleteAddressButton.setEnabled(true);
        deletePhoneButton.setEnabled(true);
        deleteDateButton.setEnabled(true);
        nameLabel3.setText("");
        addressLabel3.setText("");
        phoneLabel3.setText("");
        dateLabel3.setText("");
        
        nameTable.clearSelection();
        addressTable.clearSelection();
        phoneTable.clearSelection();;
        datesTable.clearSelection();
        toggleCell=false;
        setupTableData();
        
                
    }//GEN-LAST:event_searchListKeyReleased

    private void startModifyButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startModifyButtonMouseClicked
        if(startModifyButton.isEnabled())
        {
            startModifyButton.setEnabled(false);
            endModifyButton.setEnabled(true);
            deleteContactButton.setEnabled(false);
            deleteAddressButton.setEnabled(false);
            deletePhoneButton.setEnabled(false);
            deleteDateButton.setEnabled(false);
            nameLabel3.setText("Editing: Enabled                      Press Enter to Save");
            addressLabel3.setText("Editing: Enabled                      Press Enter to Save");
            phoneLabel3.setText("Editing: Enabled                      Press Enter to Save");
            dateLabel3.setText("Editing: Enabled                      Press Enter to Save");           
            
            nameTable.setColumnSelectionAllowed(true);
            addressTable.setColumnSelectionAllowed(true);
            phoneTable.setColumnSelectionAllowed(true);
            datesTable.setColumnSelectionAllowed(true);          
            toggleCell=true;
            
        }
        
        
    }//GEN-LAST:event_startModifyButtonMouseClicked

    private void stopModifyButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopModifyButtonMouseClicked
        baseStateModifyFrame();
        searchSelected = searchList.getSelectedItem();
        if(!(searchSelected == "") && !(searchSelected == null))
        {
            System.out.println(searchSelected);
            viewButton.setEnabled(true);
        }
        setupTableData();
    }//GEN-LAST:event_stopModifyButtonMouseClicked

    private void endModifyButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_endModifyButtonMouseClicked
        if(endModifyButton.isEnabled())
        {            
            updateNameRecords();
            updateAddressRecords();
            updatePhoneRecords();
            updateDatesRecords();
            if(toggleCell)
            {
                int row = phoneTable.getSelectedRow();
                int col = phoneTable.getSelectedColumn();
                if(row>-1 && col>-1)
                {
                    phoneTable.getCellEditor(row, col).stopCellEditing();
                }
                
            }
            if(toggleCell)
            {                
                int row = addressTable.getSelectedRow();
                int col = addressTable.getSelectedColumn();   
                if(row>-1 && col>-1)
                {
                    addressTable.getCellEditor(row, col).stopCellEditing();
                }
            }
            if(toggleCell)
            {                
                int row = nameTable.getSelectedRow();
                int col = nameTable.getSelectedColumn();
                if(row>-1 && col>-1)
                {
                    nameTable.getCellEditor(row, col).stopCellEditing();
                }                
            }
            if(toggleCell)
            {
                int row = datesTable.getSelectedRow();
                int col = datesTable.getSelectedColumn();
                if(row>-1 && col>-1)
                {
                    datesTable.getCellEditor(row, col).stopCellEditing();
                }                
            }
            baseStateModifyFrame();
            fetchRecords();            
        }
    }//GEN-LAST:event_endModifyButtonMouseClicked

    private void deleteContactButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteContactButtonMouseClicked
        if(deleteContactButton.isEnabled())
        {
            deleteContactRecord();
            baseStateModifyFrame();
            fetchRecords();            
        }
    }//GEN-LAST:event_deleteContactButtonMouseClicked

    private void deleteAddressButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteAddressButtonMouseClicked
        if(deleteAddressButton.isEnabled())
        {
            deleteAddressRecord();
            baseStateModifyFrame();
            fetchRecords();            
        }
    }//GEN-LAST:event_deleteAddressButtonMouseClicked

    private void deletePhoneButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletePhoneButtonMouseClicked
        if(deletePhoneButton.isEnabled())
        {
            deletePhoneRecord();
            baseStateModifyFrame();
            fetchRecords();
        }
    }//GEN-LAST:event_deletePhoneButtonMouseClicked

    private void deleteDateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteDateButtonMouseClicked
        if(deleteDateButton.isEnabled())
        {
            deleteDatesRecord();
            baseStateModifyFrame();
            fetchRecords();
        }
    }//GEN-LAST:event_deleteDateButtonMouseClicked

    private void insertionButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insertionButtonMouseClicked
        insertFrame.setVisible(!insertFrame.isVisible()); //insert new record button acts as toggle for insert frame
    }//GEN-LAST:event_insertionButtonMouseClicked

    private void submitInsertButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submitInsertButtonMouseClicked
        insertRecords();
        baseStateModifyFrame();
        fetchRecords();
    }//GEN-LAST:event_submitInsertButtonMouseClicked

    private void dialogCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dialogCloseMouseClicked
        dialogFrame.setVisible(false);
    }//GEN-LAST:event_dialogCloseMouseClicked

    private void phoneTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phoneTableMouseClicked
        toggleCellSelection(phoneTable);
    }//GEN-LAST:event_phoneTableMouseClicked

    private void addressTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addressTableMouseClicked
        toggleCellSelection(addressTable);
    }//GEN-LAST:event_addressTableMouseClicked

    private void nameScrollPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nameScrollPaneMouseClicked
        toggleCellSelection(nameTable);
    }//GEN-LAST:event_nameScrollPaneMouseClicked

    private void datesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datesTableMouseClicked
        toggleCellSelection(datesTable);
    }//GEN-LAST:event_datesTableMouseClicked

    private void phoneTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phoneTableFocusLost
        
    }//GEN-LAST:event_phoneTableFocusLost
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }
    
    public void setSelectQueries(String keyword)
    {
        selectByFname = "SELECT fname, mname,lname from contact where fname like '"+keyword+"%'";
        selectByLname = "SELECT fname, mname,lname from contact where lname like '"+keyword+"%'";
        selectByMname = "SELECT fname, mname,lname from contact where mname like '"+keyword+"%'";
        selectByPHnum = "SELECT fname, mname,lname from contact, phone where contact.contact_id=phone.contact_id AND phone_number like '"+keyword+"%'";
        selectByZipcode = "SELECT fname, mname,lname from contact, address where contact.contact_id=address.contact_id AND zip like '"+keyword+"%'";
        selectByState = "SELECT fname, mname,lname from contact, address where contact.contact_id=address.contact_id AND state like '"+keyword+"%'";
        selectByAddr = "SELECT fname, mname,lname from contact, address where contact.contact_id=address.contact_id AND address like '%"+keyword+"%'";
        selectByCity = "SELECT fname, mname,lname from contact, address where contact.contact_id=address.contact_id AND city like '"+keyword+"%'";

    }  
        
    public void fetchRecords()
    {
        try {			
                if(!modifyDeleteFrame.isVisible())
                {
                    viewButton.setEnabled(false);
                }
                
                
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                Statement stmt = conn.createStatement();
                stmt.execute("USE atlasbase;");
                String keyword = searchField.getText().strip();
                setSelectQueries(keyword);
                
                searchList.removeAll(); //clear old list
                searchSelected=null; //set selection to false
                resCount = 0;
                searchCountLabel.setText("Search Result Choices: "+resCount);
                if(keyword != "")
                {
                    ResultSet res = stmt.executeQuery(selectByAddr +" UNION "+ selectByCity + " UNION "+ selectByState + " UNION "
                            + selectByZipcode + " UNION " +selectByFname+ " UNION " +selectByLname+ " UNION "+selectByMname+" UNION "+selectByPHnum+";");
                    
                    while (res.next()) {
                           
                           searchList.add(res.getString("fname")+"  "+res.getString("mname")+"  "+res.getString("lname")); //using double space delimiter to facilitate names that involve spaces in between
                           resCount++;
                    }
                    res.close();
                    searchCountLabel.setText("Search Result Choices: "+resCount);
                }                
                               
                
                conn.close();
                System.out.println("Success!!");
        } 
        catch(SQLException ex) {
                System.out.println("Error in connection: " + ex.getMessage());
        }
        catch(Exception e) {
                System.out.println("Error other than SQL: " + e.getMessage());
        }
    }
    
    public void insertRecords()
    {
        try {
			
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                Statement stmt = conn.createStatement();
                stmt.execute("USE atlasbase;");
                
                PreparedStatement stmt2 = conn.prepareStatement("SELECT contact_id from contact where fname=? AND mname=? AND lname=?;");
                stmt2.setString(1, insertFname.getText().strip()); //fname
                stmt2.setString(2, insertMname.getText().strip()); //mname
                stmt2.setString(3, insertLname.getText().strip()); //lname
                ResultSet res = stmt2.executeQuery();
                
                if((insertFname.getText().strip() == "") && (insertMname.getText().strip() == "") && (insertLname.getText().strip() == ""))
                {
                    dialogMsgLabel.setText("Invalid Operation: Cannot add records to empty name.");
                    dialogFrame.setVisible(true);
                }
                else
                {
                    int ckey = 0;
                    boolean foundExistingRecord = false;
                    while(res.next())
                    {
                        foundExistingRecord = true;
                        ckey=res.getInt("contact_id");
                    }
                    res.close();
                    conn.close();
                    
                    if(!foundExistingRecord)
                    {
                        //insert new record into contact table to create new contact_id which will be unique
                        ckey = insertNewContactName();                        
                    }
                    //found contact_id as ckey from old existing record or new created record, using it to populate other tables
                    if(ckey!=0)
                    {
                        insertNewAddress(ckey);
                        insertNewPhone(ckey);
                        insertNewDates(ckey);
                    }
                }            
                
                System.out.println("Success!!");
        } 
        catch(SQLException ex) {
                System.out.println("Error in connection: " + ex.getMessage());
                dialogMsgLabel.setText("Invalid Operation: Exception Occured.");
                dialogFrame.setVisible(true);
        }
        
    }
    
    public void insertNewAddress(int ckey)
    {
        if((insertAddressType.getText().strip()!="") || (insertAddress.getText().strip()!="") || (insertCity.getText().strip()!="") || (insertState.getText().strip()!="") || (insertZip.getText().strip()!="") )
        {
            try{
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                Statement stmt = conn.createStatement();
                stmt.execute("USE atlasbase;");

                PreparedStatement stmt2 = conn.prepareStatement("Insert into address(contact_id,address_type,address,city,state,zip) values(?,?,?,?,?,?)");
                stmt2.setInt(1, ckey);
                stmt2.setString(2, insertAddressType.getText().strip());
                stmt2.setString(3, insertAddress.getText().strip()); 
                stmt2.setString(4, insertCity.getText().strip()); 
                stmt2.setString(5, insertState.getText().strip());
                stmt2.setString(6, insertZip.getText().strip()); 
                stmt2.executeUpdate();

                conn.close();
            }
            catch(SQLException ex) {
                    System.out.println("Error in connection: " + ex.getMessage());
            }
        }
        
    }
    
    public void insertNewPhone(int ckey)
    {
        if((insertPhoneType.getText().strip()!="") || (insertPhoneNumber.getText().strip()!="") || (insertAreaCode.getText().strip()!=""))
        {
            try{
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                Statement stmt = conn.createStatement();
                stmt.execute("USE atlasbase;");

                PreparedStatement stmt2 = conn.prepareStatement("Insert into phone(contact_id,phone_type,area_code,phone_number) values(?,?,?,?)");
                stmt2.setInt(1, ckey);
                stmt2.setString(2, insertPhoneType.getText().strip());
                stmt2.setString(3, insertAreaCode.getText().strip());
                String ph = insertPhoneNumber.getText().strip();
                if(ph!="")
                {
                    ph=ph.substring(0, 3)+"-"+ph.substring(3, 6)+"-"+ph.substring(6);
                }
                stmt2.setString(4, ph); 

                stmt2.executeUpdate();

                conn.close();
            }
            catch(SQLException ex) {
                    System.out.println("Error in connection: " + ex.getMessage());
            }
        }
        
    }
    
    public void insertNewDates(int ckey)
    {
        if((insertDateType.getText().strip()!="") || (insertYear.getText().strip()!="") || (insertMonth.getText().strip()!="") || (insertDay.getText().strip()!=""))
        {
            String year = insertYear.getText().strip();
            String month = insertMonth.getText().strip();
            String day = insertDay.getText().strip();
            
            String dv = null;
            if((year=="") || (month=="") || (day==""))
            {
                if((year=="") && (month=="") && (day==""))
                {
                    try{
                        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                        Statement stmt = conn.createStatement();
                        stmt.execute("USE atlasbase;");

                        PreparedStatement stmt2 = conn.prepareStatement("Insert into dates(contact_id,date_type,date_value) values(?,?,?)");
                        stmt2.setInt(1, ckey);
                        stmt2.setString(2, insertDateType.getText().strip());

                        stmt2.setString(3, dv);

                        stmt2.executeUpdate();

                        conn.close();
                    }
                    catch(SQLException ex) {
                            System.out.println("Error in connection: " + ex.getMessage());
                    }
                }
                else
                {
                    dialogMsgLabel.setText("Invalid Operation: Cannot add partial dates.");
                    dialogFrame.setVisible(true);
                }
                
            }
            else
            {
                dv = year+"-"+month+"-"+day;
                
                try{
                    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                    Statement stmt = conn.createStatement();
                    stmt.execute("USE atlasbase;");

                    PreparedStatement stmt2 = conn.prepareStatement("Insert into dates(contact_id,date_type,date_value) values(?,?,?)");
                    stmt2.setInt(1, ckey);
                    stmt2.setString(2, insertDateType.getText().strip());

                    stmt2.setString(3, dv);

                    stmt2.executeUpdate();

                    conn.close();
                }
                catch(SQLException ex) {
                        System.out.println("Error in connection: " + ex.getMessage());
                }
            } 
            
        }
        
    }
    
    public int insertNewContactName()
    {
        int ckey = 0;
        try{
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
            Statement stmt = conn.createStatement();
            stmt.execute("USE atlasbase;");

            PreparedStatement stmt2 = conn.prepareStatement("Insert into contact(fname,mname,lname) values(?,?,?)");
            stmt2.setString(1, insertFname.getText().strip()); //fname
            stmt2.setString(2, insertMname.getText().strip()); //mname
            stmt2.setString(3, insertLname.getText().strip()); //lname
            stmt2.executeUpdate();
            
            PreparedStatement stmt3 = conn.prepareStatement("SELECT contact_id from contact where fname=? AND mname=? AND lname=?;");
            stmt3.setString(1, insertFname.getText().strip()); //fname
            stmt3.setString(2, insertMname.getText().strip()); //mname
            stmt3.setString(3, insertLname.getText().strip()); //lname
            ResultSet res = stmt3.executeQuery();
            ckey = res.getInt("contact_id");
            
            res.close();
            conn.close();
        }
        catch(SQLException ex) {
                System.out.println("Error in connection: " + ex.getMessage());
        }
        return ckey;
    }
    
    public void deleteContactRecord()
    {
        int row = nameTable.getSelectedRow();
        int col = nameTable.getSelectedColumn();
        ArrayList<Object> li;
        if(row>-1 && row<contactMap.size())
        {
            li = (ArrayList)contactMap.get(row);
            //listDisplay(li);            
            
            try{
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                Statement stmt = conn.createStatement();
                stmt.execute("USE atlasbase;");

                PreparedStatement stmt2 = conn.prepareStatement("Delete from contact where contact_id=?");
                stmt2.setInt(1,(Integer)li.get(0));                                
                stmt2.executeUpdate();

                conn.close();
            }
            catch(SQLException ex) {
                    System.out.println("Error in connection: " + ex.getMessage());
            }
            
        }
    }
    
    public void deleteAddressRecord()
    {
        int row = addressTable.getSelectedRow();
        ArrayList<Object> li;
        if(row>-1 && row<addressMap.size())
        {
            li = (ArrayList)addressMap.get(row);
            //listDisplay(li);            
            
            try{
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                Statement stmt = conn.createStatement();
                stmt.execute("USE atlasbase;");

                PreparedStatement stmt2 = conn.prepareStatement("Delete from address where contact_id=? AND address_id=?");
                stmt2.setInt(1,(Integer)li.get(0));
                stmt2.setInt(2,(Integer)li.get(1));                
                stmt2.executeUpdate();

                conn.close();
            }
            catch(SQLException ex) {
                    System.out.println("Error in connection: " + ex.getMessage());
            }
            
        }
        
    }
    
    public void deletePhoneRecord()
    {
        int row = phoneTable.getSelectedRow();
        int col = phoneTable.getSelectedColumn();
        ArrayList<Object> li;
        if(row>-1 && row<phoneMap.size())
        {
            li = (ArrayList)phoneMap.get(row);
            //listDisplay(li);            
            
            try{
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                Statement stmt = conn.createStatement();
                stmt.execute("USE atlasbase;");

                PreparedStatement stmt2 = conn.prepareStatement("Delete from phone where contact_id=? AND phone_id=?");
                stmt2.setInt(1,(Integer)li.get(0));
                stmt2.setInt(2,(Integer)li.get(1));                
                stmt2.executeUpdate();

                conn.close();
            }
            catch(SQLException ex) {
                    System.out.println("Error in connection: " + ex.getMessage());
            }
            
        }
        
    }
    
    public void deleteDatesRecord()
    {
        int row = datesTable.getSelectedRow();
        ArrayList<Object> li;
        if(row>-1 && row<datesMap.size())
        {
            li = (ArrayList)datesMap.get(row);
            //listDisplay(li);            
            
            try{
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                Statement stmt = conn.createStatement();
                stmt.execute("USE atlasbase;");

                PreparedStatement stmt2 = conn.prepareStatement("Delete from dates where contact_id=? AND date_id=?");
                stmt2.setInt(1,(Integer)li.get(0));
                stmt2.setInt(2,(Integer)li.get(1));                
                stmt2.executeUpdate();

                conn.close();
            }
            catch(SQLException ex) {
                    System.out.println("Error in connection: " + ex.getMessage());
            }
            
        }
        
    }
    
    public void updateAddressRecords()
    {
        int row = 0;
        int col = 0;
        ArrayList<Object> li;
        
        if(row>-1 && row<addressMap.size())
        {
            li = (ArrayList)addressMap.get(row);
            //listDisplay(li);            
            
            try{
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                Statement stmt = conn.createStatement();
                stmt.execute("USE atlasbase;");

                PreparedStatement stmt2 = conn.prepareStatement("Update address set address_type=?, address=?, city=?, state=?, zip=? where contact_id=? and address_id=?");
                stmt2.setString(1, (String)addressTable.getValueAt(row, 0));
                stmt2.setString(2, (String)addressTable.getValueAt(row, 1));
                stmt2.setString(3, (String)addressTable.getValueAt(row, 2));
                stmt2.setString(4, (String)addressTable.getValueAt(row, 3));
                stmt2.setString(5, (String)addressTable.getValueAt(row, 4));
                stmt2.setInt(6,(Integer)li.get(0));
                stmt2.setInt(7,(Integer)li.get(1));                
                stmt2.executeUpdate();

                conn.close();
            }
            catch(SQLException ex) {
                    System.out.println("Error in connection: " + ex.getMessage());
            }
            row++;
            
        }
        if(row>addressMap.size())
        {
            //insert new sub-record to existing name record
            
        }
    }
    
    public void updatePhoneRecords()
    {
        int row = 0;
        int col = 0;
        ArrayList<Object> li;
        
        if(row>-1 && row<phoneMap.size())
        {
            li = (ArrayList)phoneMap.get(row);
            //listDisplay(li);            
            
            try{
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                Statement stmt = conn.createStatement();
                stmt.execute("USE atlasbase;");

                PreparedStatement stmt2 = conn.prepareStatement("Update phone set phone_type=?, area_code=?, phone_number=? where contact_id=? and phone_id=?");
                stmt2.setString(1, (String)phoneTable.getValueAt(row, 0));
                stmt2.setString(2, (String)phoneTable.getValueAt(row, 1));
                stmt2.setString(3, (String)phoneTable.getValueAt(row, 2));
                stmt2.setInt(4,(Integer)li.get(0));
                stmt2.setInt(5,(Integer)li.get(1));                
                stmt2.executeUpdate();

                conn.close();
            }
            catch(SQLException ex) {
                    System.out.println("Error in connection: " + ex.getMessage());
            }
            row++;
            
        }
        else if(row>phoneMap.size())
        {
            //insert new sub-record to name record
        }
    }
    public void updateDatesRecords()
    {
        int row = 0;
        int col = 0;
        ArrayList<Object> li;
        
        if(row>-1 && row<datesMap.size())
        {
            li = (ArrayList)datesMap.get(row);
            //listDisplay(li);  
            
            String year = (String)datesTable.getValueAt(row, 1);
            String month = (String)datesTable.getValueAt(row, 2);
            String day = (String)datesTable.getValueAt(row, 3);
            String dv = null;
            if((year=="") || (month=="") || (day==""))
            {
                System.out.println("Hello");
                if((year=="") && (month=="") && (day==""))
                {
                    try{
                        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                        Statement stmt = conn.createStatement();
                        stmt.execute("USE atlasbase;");

                        PreparedStatement stmt2 = conn.prepareStatement("Update dates set date_type=?, date_value=? where contact_id=? and date_id=?");
                        stmt2.setString(1, (String)datesTable.getValueAt(row, 0));

                        listDisplay(li);
                        stmt2.setString(2, dv);
                        stmt2.setInt(3,(Integer)li.get(0));
                        stmt2.setInt(4,(Integer)li.get(1));                
                        stmt2.executeUpdate();

                        conn.close();
                    }
                    catch(SQLException ex) {
                            System.out.println("Error in connection: " + ex.getMessage());
                    }
                }
                else
                {
                    dialogMsgLabel.setText("Invalid Operation: Cannot modify partial dates.");
                    dialogFrame.setVisible(true);
                }
                
            }
            else
            {
                dv = year+"-"+month+"-"+day;
                try{
                    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                    Statement stmt = conn.createStatement();
                    stmt.execute("USE atlasbase;");

                    PreparedStatement stmt2 = conn.prepareStatement("Update dates set date_type=?, date_value=? where contact_id=? and date_id=?");
                    stmt2.setString(1, (String)datesTable.getValueAt(row, 0));


                    stmt2.setString(2, dv);
                    stmt2.setInt(3,(Integer)li.get(0));
                    stmt2.setInt(4,(Integer)li.get(1));                
                    stmt2.executeUpdate();

                    conn.close();
                }
                catch(SQLException ex) {
                        System.out.println("Error in connection: " + ex.getMessage());
                }
            }
            
            row++;
            
        }
        else if(row>datesMap.size())
        {
            //insert new sub-record to name record
        }
    }
    public void updateNameRecords()
    {
        int row = 0;
        int col = 0;
        ArrayList<Object> li;
        
        if(row>-1 && row<contactMap.size())
        {
            li = (ArrayList)contactMap.get(row);
            
            //listDisplay(li);            
            
            try{
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                Statement stmt = conn.createStatement();
                stmt.execute("USE atlasbase;");

                PreparedStatement stmt2 = conn.prepareStatement("Update contact set fname=?,mname=?,lname=? where contact_id=?");
                stmt2.setString(1, (String)nameTable.getValueAt(row, 0));
                stmt2.setString(2, (String)nameTable.getValueAt(row, 1));
                stmt2.setString(3, (String)nameTable.getValueAt(row, 2));
                stmt2.setInt(4,(Integer)li.get(0));
                stmt2.executeUpdate();

                conn.close();
            }
            catch(SQLException ex) {
                    System.out.println("Error in connection: " + ex.getMessage());
            }            
            
        }
    }
    
    public void setupTableData()
    {                
        try {
                String[] str = searchSelected.split("  ");
                //Reset all maps and tables
                contactMap.clear();
                addressMap.clear();
                phoneMap.clear();
                datesMap.clear(); 
                resetAllTables();
                
                //set fname,mname,lname in insert frame if selected before clicking insert new record button
                insertFname.setText(str[0]);
                insertMname.setText(str[1]);
                insertLname.setText(str[2]);

                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "Atlasco3#");
                Statement stmt = conn.createStatement();
                stmt.execute("USE atlasbase;");
                PreparedStatement stmt2 = conn.prepareStatement("select contact.contact_id,address_id,phone_id,date_id,fname,mname,lname,address,address_type,address,city,state,zip,phone_type,area_code,phone_number,date_type,date_value "
                        + "from contact LEFT JOIN address ON contact.contact_id=address.contact_id "
                        + "LEFT JOIN phone ON contact.contact_id=phone.contact_id "
                        + "LEFT JOIN dates ON contact.contact_id=dates.contact_id "
                        + "where fname=? AND mname=? AND lname=?;");
                
                stmt2.setString(1, str[0]); //fname
                stmt2.setString(2, str[1]); //mname
                stmt2.setString(3, str[2]); //lname
                ResultSet res = stmt2.executeQuery();
                while (res.next()) {                     
                       
                       //Setting up maps for all 4 tables example - contactMap{[key-rowNumber] : [value-contact_id,fname,mname,lname]}
                       ArrayList<Object> cl = new ArrayList<Object>();
                       global_selected_contactKey = res.getInt("contact_id");
                       cl.add(global_selected_contactKey);
                       cl.add(res.getString("fname"));
                       cl.add(res.getString("mname"));
                       cl.add(res.getString("lname"));                       
                       contactMap.put(contactMap.size(), cl);
                       if(!contactMap.containsValue(cl))
                       {
                           contactMap.put(contactMap.size(), cl);
                       }                       
                       
                       ArrayList<Object> al = new ArrayList<Object>();
                       al.add(res.getInt("contact_id"));
                       al.add(res.getInt("address_id"));
                       al.add(res.getString("address_type"));
                       al.add(res.getString("address"));
                       al.add(res.getString("city"));
                       al.add(res.getString("state"));
                       al.add(res.getString("zip"));
                       if(!addressMap.containsValue(al)) //to avoid redundant set of values for each record
                       {
                           addressMap.put(addressMap.size(), al);
                       }                       
                       
                       ArrayList<Object> pl = new ArrayList<Object>();
                       pl.add(res.getInt("contact_id"));
                       pl.add(res.getInt("phone_id"));
                       pl.add(res.getString("phone_type"));
                       pl.add(res.getString("area_code"));
                       pl.add(res.getString("phone_number"));                                              
                       if(!phoneMap.containsValue(pl)) //to avoid redundant set of values for each record
                       {
                           phoneMap.put(phoneMap.size(), pl);
                       }
                       
                       ArrayList<Object> dl = new ArrayList<Object>();
                       dl.add(res.getInt("contact_id"));
                       dl.add(res.getInt("date_id"));
                       dl.add(res.getString("date_type"));
                       dl.add(res.getDate("date_value"));
                       if(!datesMap.containsValue(dl))
                       {
                           datesMap.put(datesMap.size(), dl);
                       }                                              
                }
                
                //displayMapsToConsole();   //displays all mappings on console for view table
                displayNameTable();
                displayAddressTable();
                displayPhoneTable();
                displayDatesTable();
                
                res.close();
                conn.close();
                System.out.println("Success!!");
        } 
        catch(SQLException ex) {
                System.out.println("Error in connection: " + ex.getMessage() + " at line "+ex.getStackTrace()[0].getLineNumber());
        }
        catch(Exception e){
                System.out.println("Error Not in connection: " + e.getMessage() + " at line "+e.getStackTrace()[0].getLineNumber());
        }
    }
    
    public void displayNameTable()
    {
        ArrayList<Object> li = (ArrayList)contactMap.get(0);
        
        //Retrieving fname,mname,lname
        nameTable.getModel().setValueAt(li.get(1), 0, 0); 
        nameTable.getModel().setValueAt(li.get(2), 0, 1);
        nameTable.getModel().setValueAt(li.get(3), 0, 2);
        
        int numOfRows = nameTable.getModel().getRowCount();
        nameLabel2.setText("Records Found: "+numOfRows);
        if(numOfRows>0) //set records count on label and color change to green otherwise red
        {
            nameLabel2.setForeground(new Color(0,153,0));
        }
        else
        {
            nameLabel2.setForeground(new Color(153,0,0));
        }
    }
    
    public void displayAddressTable()
    {
        for(int recordsIterator=0; recordsIterator<addressMap.size();recordsIterator++)
        {
            ArrayList<Object> l = (ArrayList)addressMap.get(recordsIterator);
            DefaultTableModel t1 = (DefaultTableModel)addressTable.getModel();
            
            t1.addRow(new Object[]{}); //keeps one empty row at the end to have option to modify record by insertion in address,phone,dates tables
            
            t1.setValueAt(l.get(2), recordsIterator, 0);
            t1.setValueAt(l.get(3), recordsIterator, 1);
            t1.setValueAt(l.get(4), recordsIterator, 2);
            t1.setValueAt(l.get(5), recordsIterator, 3);
            t1.setValueAt(l.get(6), recordsIterator, 4);
            addressTable.setModel(t1);
            
            boolean rowValidator=false;
            for(int i=0;i<t1.getColumnCount();i++)//keeps check on null row
            {
                if(rowValidator==false && ((t1.getValueAt(recordsIterator, i)!="" && t1.getValueAt(recordsIterator, i)!=null)))
                {
                    rowValidator=true;
                }
            }
            if(rowValidator==true)
            {
                addressTable.setModel(t1);
            } 
        }
        
        setTableCountLabel(addressTable,addressLabel2);

    }
    public void displayPhoneTable()
    {
        for(int recordsIterator=0; recordsIterator<phoneMap.size();recordsIterator++)
        {
            ArrayList<Object> l = (ArrayList)phoneMap.get(recordsIterator);
            DefaultTableModel t1 = (DefaultTableModel)phoneTable.getModel();
            
            t1.addRow(new Object[]{}); //keeps one empty row at the end to have option to modify record by insertion in address,phone,dates tables
            
            t1.setValueAt(l.get(2), recordsIterator, 0);
            t1.setValueAt(l.get(3), recordsIterator, 1);
            t1.setValueAt(l.get(4), recordsIterator, 2);  
            
            boolean rowValidator=false;
            for(int i=0;i<t1.getColumnCount();i++)//keeps check on null row
            {
                if(rowValidator==false && ((t1.getValueAt(recordsIterator, i)!="" && t1.getValueAt(recordsIterator, i)!=null)))
                {
                    rowValidator=true;
                }
            }
            if(rowValidator==true)
            {
                phoneTable.setModel(t1);
            } 
        }
        
        setTableCountLabel(phoneTable, phoneLabel2);
    }
    public void displayDatesTable()
    {
        for(int recordsIterator=0; recordsIterator<datesMap.size();recordsIterator++)
        {
            ArrayList<Object> l = (ArrayList)datesMap.get(recordsIterator);
            DefaultTableModel t1 = (DefaultTableModel)datesTable.getModel();
            
            t1.addRow(new Object[]{}); //keeps one empty row at the end to have option to modify record by insertion in address,phone,dates tables
            
            t1.setValueAt(l.get(2), recordsIterator, 0);
            String[] dateSplit = {"","",""};
            if(l.get(3)!=null)
            {
                dateSplit = (l.get(3).toString()).split("-"); //Extracts string from sql.date type object
            }
            
            t1.setValueAt(dateSplit[0], recordsIterator, 1);
            t1.setValueAt(dateSplit[1], recordsIterator, 2);
            t1.setValueAt(dateSplit[2], recordsIterator, 3);
            
            boolean rowValidator=false;
            for(int i=0;i<t1.getColumnCount();i++)//keeps check on null row
            {
                if(rowValidator==false && ((t1.getValueAt(recordsIterator, i)!="" && t1.getValueAt(recordsIterator, i)!=null)))
                {
                    rowValidator=true;
                }
            }
            if(rowValidator==true)
            {
                datesTable.setModel(t1);
            }            
        }
        setTableCountLabel(datesTable, dateLabel2);
    }
    
    public void toggleCellSelection(JTable jt)
    {
        if(toggleCell)
        {
            int row = jt.getSelectedRow();
            int col = jt.getSelectedColumn();
            jt.editCellAt(row, col);
        }
    }
    public void resetAllTables() //preserves base structure of view tables
    {
        DefaultTableModel t1 = (DefaultTableModel)nameTable.getModel();
        while(t1.getRowCount()>0)
        {
            t1.removeRow(0);
        }
        t1.addRow(new Object[]{});
        DefaultTableModel t2 = (DefaultTableModel)addressTable.getModel();
        while(t2.getRowCount()>0)
        {
            t2.removeRow(0);
        }
        t2.addRow(new Object[]{});
        DefaultTableModel t3 = (DefaultTableModel)phoneTable.getModel();
        while(t3.getRowCount()>0)
        {
            t3.removeRow(0);
        }
        t3.addRow(new Object[]{});
        DefaultTableModel t4 = (DefaultTableModel)datesTable.getModel();
        while(t4.getRowCount()>0)
        {
            t4.removeRow(0);
        }
        t4.addRow(new Object[]{});
    }
    public void displayMapsToConsole() //displays all mappings on console for view table
    {
        for (Map.Entry entry : contactMap.entrySet())
        {
            System.out.println("key: " + entry.getKey() + "; value: " + entry.getValue());
        }
        for (Map.Entry entry : addressMap.entrySet())
        {
            System.out.println("key: " + entry.getKey() + "; value: " + entry.getValue());
        }
        for (Map.Entry entry : phoneMap.entrySet())
        {
            System.out.println("key: " + entry.getKey() + "; value: " + entry.getValue());
        }
        for (Map.Entry entry : datesMap.entrySet())
        {
            System.out.println("key: " + entry.getKey() + "; value: " + entry.getValue());
        }
    }
    public void listDisplay(ArrayList<Object> list) //simple list view in console used for debugging
    {
        for (Object object : list) {
            System.out.println(object);
        }
    }
    public void setTableCountLabel(JTable jt, Label l)
    {
        TableModel t=jt.getModel();
        int rowCounter = 0;
        for(int i=0;i<t.getRowCount();i++)
        {
            boolean rowValidator = false;
            for(int j=0;j<t.getColumnCount();j++)
            {                
                if(rowValidator == false && (t.getValueAt(i, j)!="" && t.getValueAt(i, j)!=null))
                {
                    rowValidator = true;
                }
            }
            if(rowValidator==true) //counts only the relevant rows nad not empty rows
            {
                rowCounter++;
            }
        }
        l.setText("Records Found: "+rowCounter);
        if(rowCounter>0) //set records count on label and color change to green otherwise red
        {            
            l.setForeground(new Color(0,153,0)); //green
        }
        else
        {
            l.setForeground(new Color(153,0,0)); //red
            DefaultTableModel dt = (DefaultTableModel)t; //reducing rows displayed to 1
            while(t.getRowCount()>1)
            {
                dt.removeRow(dt.getRowCount()-1);
            }
        }
        
    }
    public void baseStateModifyFrame()
    {
        endModifyButton.setEnabled(false);
        startModifyButton.setEnabled(true);
        deleteContactButton.setEnabled(true);
        deleteAddressButton.setEnabled(true);
        deletePhoneButton.setEnabled(true);
        deleteDateButton.setEnabled(true);
        nameLabel3.setText("");
        addressLabel3.setText("");
        phoneLabel3.setText("");
        dateLabel3.setText("");        
        modifyDeleteFrame.setVisible(false);
        
        //return selection from cell by cell to row selection
        nameTable.setColumnSelectionAllowed(false);
        addressTable.setColumnSelectionAllowed(false);
        phoneTable.setColumnSelectionAllowed(false);
        datesTable.setColumnSelectionAllowed(false);
        nameTable.clearSelection();
        addressTable.clearSelection();
        phoneTable.clearSelection();
        datesTable.clearSelection();
        toggleCell=false;        
        
        //clear all values in insert frame
        insertFrame.setVisible(false);
        insertFname.setText("");
        insertMname.setText("");
        insertLname.setText("");
        insertAddressType.setText("");
        insertAddress.setText("");
        insertCity.setText("");
        insertState.setText("");
        insertZip.setText("");
        insertPhoneType.setText("");
        insertPhoneNumber.setText("");
        insertAreaCode.setText("");
        insertDateType.setText("");
        insertYear.setText("");
        insertMonth.setText("");
        insertYear.setText("");
        
        
    }

    private String searchSelected;
    private long resCount = 0;
    private int global_selected_contactKey = 0;
    private boolean toggleCell = false;
    private HashMap<Integer, Object> contactMap = new HashMap<Integer, Object>();
    private HashMap<Integer, Object> addressMap = new HashMap<Integer, Object>();
    private HashMap<Integer, Object> phoneMap = new HashMap<Integer, Object>();
    private HashMap<Integer, Object> datesMap = new HashMap<Integer, Object>();
    private static String selectByFname;
    private static String selectByLname;
    private static String selectByMname;
    private static String selectByPHnum;
    private static String selectByZipcode;
    private static String selectByState;
    private static String selectByAddr;
    private static String selectByCity;
    private static Connection conn = null;    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label addressLabel;
    private java.awt.Label addressLabel2;
    private java.awt.Label addressLabel3;
    private javax.swing.JScrollPane addressScrollPane;
    private javax.swing.JTable addressTable;
    private java.awt.Label dateLabel;
    private java.awt.Label dateLabel2;
    private java.awt.Label dateLabel3;
    private javax.swing.JScrollPane datesScrollPane;
    private javax.swing.JTable datesTable;
    private javax.swing.JButton deleteAddressButton;
    private javax.swing.JButton deleteContactButton;
    private javax.swing.JButton deleteDateButton;
    private javax.swing.JButton deletePhoneButton;
    private javax.swing.JButton dialogClose;
    private javax.swing.JFrame dialogFrame;
    private java.awt.Label dialogMsgLabel;
    private javax.swing.JButton endModifyButton;
    private java.awt.TextField insertAddress;
    private java.awt.TextField insertAddressType;
    private java.awt.TextField insertAreaCode;
    private java.awt.TextField insertCity;
    private java.awt.TextField insertDateType;
    private java.awt.TextField insertDay;
    private java.awt.TextField insertFname;
    private javax.swing.JFrame insertFrame;
    private java.awt.TextField insertLname;
    private java.awt.TextField insertMname;
    private java.awt.TextField insertMonth;
    private java.awt.TextField insertPhoneNumber;
    private java.awt.TextField insertPhoneType;
    private java.awt.TextField insertState;
    private java.awt.TextField insertYear;
    private java.awt.TextField insertZip;
    private javax.swing.JButton insertionButton;
    private java.awt.Label labelFname;
    private java.awt.Label labelFname1;
    private java.awt.Label labelFname10;
    private java.awt.Label labelFname11;
    private java.awt.Label labelFname12;
    private java.awt.Label labelFname2;
    private java.awt.Label labelFname3;
    private java.awt.Label labelFname4;
    private java.awt.Label labelFname5;
    private java.awt.Label labelFname6;
    private java.awt.Label labelFname7;
    private java.awt.Label labelFname8;
    private java.awt.Label labelFname9;
    private javax.swing.JFrame modifyDeleteFrame;
    private java.awt.Label nameLabel;
    private java.awt.Label nameLabel2;
    private java.awt.Label nameLabel3;
    private javax.swing.JScrollPane nameScrollPane;
    private javax.swing.JTable nameTable;
    private java.awt.Label phoneLabel;
    private java.awt.Label phoneLabel2;
    private java.awt.Label phoneLabel3;
    private javax.swing.JScrollPane phoneScrollPane;
    private javax.swing.JTable phoneTable;
    private java.awt.Label searchCountLabel;
    private java.awt.TextField searchField;
    private java.awt.List searchList;
    private javax.swing.JButton startModifyButton;
    private javax.swing.JButton stopModifyButton;
    private java.awt.Button submitInsertButton;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
